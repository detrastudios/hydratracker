// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview This file defines a Genkit flow for generating adaptive water reminders.
 *
 * - `generateAdaptiveReminders`: A function that generates adaptive water reminders based on user context.
 * - `AdaptiveRemindersInput`: The input type for the `generateAdaptiveReminders` function.
 * - `AdaptiveRemindersOutput`: The output type for the `generateAdaptiveReminders` function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// Define the input schema for the adaptive water reminders flow.
const AdaptiveRemindersInputSchema = z.object({
  dailyGoal: z.number().describe('The user’s daily water intake goal in ml.'),
  lastIntake: z.string().nullable().optional().describe('The timestamp of the last water intake (ISO format).'),
  wakeUpTime: z.string().describe('The user’s wake-up time (HH:mm).'),
  bedTime: z.string().describe('The user’s bed time (HH:mm).'),
  activityLevel: z
    .enum(['sedentary', 'lightlyActive', 'moderatelyActive', 'veryActive', 'extraActive'])
    .describe('The user’s activity level.'),
  climate: z.string().describe('The climate the user is in (e.g., temperate, hot, dry).'),
});

export type AdaptiveRemindersInput = z.infer<typeof AdaptiveRemindersInputSchema>;

// Define the output schema for the adaptive water reminders flow.
const AdaptiveRemindersOutputSchema = z.object({
  reminders: z.array(
    z.object({
      time: z.string().describe('The time for the reminder (HH:mm).'),
      message: z.string().describe('A friendly message to encourage water intake.'),
    })
  ).describe('A list of adaptive water reminders for the user.'),
});

export type AdaptiveRemindersOutput = z.infer<typeof AdaptiveRemindersOutputSchema>;

// Exported function to generate adaptive water reminders.
export async function generateAdaptiveReminders(input: AdaptiveRemindersInput): Promise<AdaptiveRemindersOutput> {
  return adaptiveRemindersFlow(input);
}

// Define the prompt for generating adaptive water reminders.
const adaptiveRemindersPrompt = ai.definePrompt({
  name: 'adaptiveRemindersPrompt',
  input: {schema: AdaptiveRemindersInputSchema},
  output: {schema: AdaptiveRemindersOutputSchema},
  prompt: `You are a helpful AI assistant that generates a list of adaptive water reminders for a user.

  Consider the following context about the user:
  - Daily water intake goal: {{dailyGoal}} ml
  {{#if lastIntake}}- Last water intake: {{lastIntake}}{{/if}}
  - Wake-up time: {{wakeUpTime}}
  - Bed time: {{bedTime}}
  - Activity level: {{activityLevel}}
  - Climate: {{climate}}

  Generate a list of water reminders, taking into account the user's context to suggest optimal times and friendly messages to encourage hydration.
  The reminders should be spread throughout the day, avoiding inconvenient times like during sleep. Vary the messages.
  Do not remind the user to drink before they wake up or after they go to bed.
  Prioritize reminders during periods of activity.
  If the climate is hot, remind the user to drink more frequently.
  If last intake is known, take that into consideration when reminding the user.
  Omit any intro or outro text, and respond with ONLY the reminders in JSON format.
  `,
});

// Define the Genkit flow for adaptive water reminders.
const adaptiveRemindersFlow = ai.defineFlow(
  {
    name: 'adaptiveRemindersFlow',
    inputSchema: AdaptiveRemindersInputSchema,
    outputSchema: AdaptiveRemindersOutputSchema,
  },
  async input => {
    const {output} = await adaptiveRemindersPrompt(input);
    return output!;
  }
);
